#
#  prompt_redefined_setup
#  Zsh: Redefined.
#
#  Created by Zakhary Kaplan on 2019-05-13.
#  Copyright © 2021 Zakhary Kaplan. All rights reserved.
#

# -- Modules -- {{{
zmodload zsh/datetime
# }}}

# -- Variables -- {{{
# Colours
ZSH_PROMPT_COLOUR_RED='167'
ZSH_PROMPT_COLOUR_GREEN='107'
ZSH_PROMPT_COLOUR_YELLOW='222'
ZSH_PROMPT_COLOUR_BLUE='31'
ZSH_PROMPT_COLOUR_MAGENTA='183'
ZSH_PROMPT_COLOUR_CYAN='110'
# Shades
ZSH_PROMPT_COLOUR_GREY1_BG='233'
ZSH_PROMPT_COLOUR_GREY1_FG='242'
ZSH_PROMPT_COLOUR_GREY2_BG='236'
ZSH_PROMPT_COLOUR_GREY2_FG='246'
# Items
ZSH_PROMPT_COLOUR_MAIN='25'
# Git
ZSH_PROMPT_COLOUR_GIT_BRANCH='71'
ZSH_PROMPT_COLOUR_GIT_STATUS='215'
ZSH_PROMPT_ICON_GIT_CLEAN=''
ZSH_PROMPT_ICON_GIT_DIRTY='*'
ZSH_PROMPT_ICON_GIT_PREFIX='('
ZSH_PROMPT_ICON_GIT_SUFFIX=')'
# }}}

# -- Help -- {{{
function prompt_redefined_help() {
    cat << EOF
TODO: Write a help menu.
EOF
}
# }}}

# -- Setup -- {{{
function prompt_redefined_setup() {
    # Colours
    local red='$ZSH_PROMPT_COLOUR_RED'
    local green='$ZSH_PROMPT_COLOUR_GREEN'
    local yellow='$ZSH_PROMPT_COLOUR_YELLOW'
    local blue='$ZSH_PROMPT_COLOUR_BLUE'
    local magenta='$ZSH_PROMPT_COLOUR_MAGENTA'
    local cyan='$ZSH_PROMPT_COLOUR_CYAN'
    # Shades
    local grey1_bg='$ZSH_PROMPT_COLOUR_GREY1_BG'
    local grey1_fg='$ZSH_PROMPT_COLOUR_GREY1_FG'
    local grey2_bg='$ZSH_PROMPT_COLOUR_GREY2_BG'
    local grey2_fg='$ZSH_PROMPT_COLOUR_GREY2_FG'
    # Items
    local main='$ZSH_PROMPT_COLOUR_MAIN'
    # Variables
    local cmdtime='$ZSH_PROMPT_VAR_CMDTIME'
    local vimode='$ZSH_PROMPT_VAR_VIMODE'

    # Prompt
    local directory="%F{$main}%3~%f"
    local gitinfo='$ZSH_PROMPT_VAR_GITINFO'
    local symbol="%F{$cyan}%(!.#.»)%f"
    PS1="${directory}${gitinfo} ${symbol} "

    # Right Prompt
    local cmdtime="%F{$grey1_fg}%K{$grey1_bg} $cmdtime %f%k"
          cmdtime="\${ZSH_PROMPT_VAR_CMDTIME:+\"$cmdtime\"}" # hide if unset
    local datetime="%F{$grey2_fg}%K{$grey2_bg} %D{%X}%E%f%k"
    local exitstatus="%(?,,%F{$red}%K{$grey1_bg} %? %f%k)"
    local upjobs="%(1j,%F{$yellow}%K{$grey1_bg} %j %f%k,)"
    local userhost="%F{$blue}%K{$grey1_bg} %n@%m %f%k"
          userhost="\${SSH_TTY:+\"$userhost\"}" # hide if unset
    local vimode="%F{$grey1_fg}%K{$grey1_bg} $vimode %f%k"
          vimode="\${ZSH_PROMPT_VAR_VIMODE:+\"$vimode\"}"
    RPS1="${cmdtime}${exitstatus}${upjobs}${userhost}${vimode}${datetime}"

    # Hooks
    add-zsh-hook precmd prompt_redefined_precmd
    add-zsh-hook preexec prompt_redefined_preexec
}
# }}}

# -- Hooks -- {{{
function prompt_redefined_precmd() {
    # Get the elapsed command execution time
    ZSH_PROMPT_VAR_CMDTIME="${ZSH_PROMPT_VAR_TIMESTAMP:+$(prompt_redefined_cmdtime)}"
    # Get the gitinfo for the current directory
    ZSH_PROMPT_VAR_GITINFO="${ZSH_PROMPT_VAR_GITINFO:-$(prompt_redefined_gitinfo)}"
    # Unset the previous command timestamp
    unset ZSH_PROMPT_VAR_TIMESTAMP
    # Unset the previous vi-mode
    unset ZSH_PROMPT_VAR_VIMODE
}

function prompt_redefined_preexec() {
    # Get the initial command timestamp
    ZSH_PROMPT_VAR_TIMESTAMP="$EPOCHREALTIME"
    # Unset the previous gitinfo
    unset ZSH_PROMPT_VAR_GITINFO
}
# }}}

# -- Functions -- {{{
# Calculate command execution time
function prompt_redefined_cmdtime() {
    local stop="$EPOCHREALTIME"
    local start="${ZSH_PROMPT_VAR_TIMESTAMP:-$stop}"
    let local elapsed="$stop - $start"
    (( $elapsed > 0 )) && printf '%.2fs' $elapsed
}

# Determine gitinfo for the current directory
function prompt_redefined_gitinfo() {
    # Nothing to print if not inside a git diretory
    git rev-parse --is-inside-work-tree &> /dev/null || return
    # Format the prefix
    local prefix="%F{$ZSH_PROMPT_COLOUR_MAIN}$ZSH_PROMPT_ICON_GIT_PREFIX%f"
    # Get the current ref
    local ref
    ref="$(git symbolic-ref --short HEAD 2> /dev/null)" \
        || ref="$(git rev-parse --short HEAD 2> /dev/null)" \
        || return
    # Format the branch
    local branch="%F{$ZSH_PROMPT_COLOUR_GIT_BRANCH}$ref%f"
    # Get the git directory status
    local gstatus=$(git status --porcelain)
    # Check if the working tree is dirty
    local icon
    if [ -z "$gstatus" ]; then
        icon="$ZSH_PROMPT_ICON_GIT_CLEAN"
    else
        icon="$ZSH_PROMPT_ICON_GIT_DIRTY"
    fi
    # Format the icon
    icon="%F{$ZSH_PROMPT_COLOUR_GIT_STATUS}$icon%f"
    # Format the suffix
    local suffix="%F{$ZSH_PROMPT_COLOUR_MAIN}$ZSH_PROMPT_ICON_GIT_SUFFIX%f"
    # Return formatted gitinfo
    echo "${prefix}${branch}${icon}${suffix}"
}

# Determine the current vi-mode
function prompt_redefined_vimode() {
    local vimode
    case $KEYMAP in
        main|viins) vimode='%F{$ZSH_PROMPT_COLOUR_CYAN}INSERT%f' ;;
        vicmd)      vimode='%F{$ZSH_PROMPT_COLOUR_MAGENTA}NORMAL%f' ;;
    esac
    echo -n "$vimode"
}
# }}}

# -- Widgets -- {{{
# Executed every time the keymap changes
function zle-keymap-select() {
    # Get the current vi-mode
    ZSH_PROMPT_VAR_VIMODE="$(prompt_redefined_vimode)"
    zle reset-prompt
}
zle -N zle-keymap-select
# }}}

prompt_redefined_setup "$@"

# vim:ft=zsh:fdl=0:fdm=marker:
